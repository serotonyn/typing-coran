{"version":3,"sources":["renderCorrectLigatures.tsx","keyboard/Button.tsx","Keyboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["_ligature","beforeCurChar","curChar","afterCurChar","react_default","a","createElement","className","concat","ligature","renderCorrectLigatures","curCharNum","curWithoutTashkil","indexOfLigaturedLaOfNegation","slice","curCharLam","curCharAlef","isNextCharAnEmptyString","isPrevCharAnEmptyString","isCurCharAnEmptyString","isStartOfSentence","isEndOfSentence","length","isAlefSucceededByHaa","isHaaPreceededByAlef","isWaaSucceedByLam","isLamPreceededByWaa","ligature_","_ligature_","Button","renderSpecialButton","button","_this$props","this","props","char","classs","isToPress","match","name","Component","layout","default","shift","shiftAlt","KeyboardLayout","state","input","onInputChanged","data","_this","setState","onInputSubmitted","console","log","showCorrectLayout","keyToPress","condition","wichArrContainsKeyToPress","reduce","acc","cur","includes","map","line","key","generate","split","c","Fragment","Button_Button","App","curSourat","totalVersesCount","verses","curVerseNum","curVerse","userInput","handleKeyDown","e","_this$state","isVerseEnd","inputCharValue","isEndOfSourat","setCurVerse","getSourat","_callee","filePath","res","count","verse","regenerator_default","wrap","_context","prev","next","path","join","fetch","sent","json","stop","_this$state2","setCurVerseWithoutTechkil","stringWithoutTashkil","replace","indexOfAlef","indexOf","updateCurCharNum","_this$state3","getTextWithHighlitedChar","_this$state4","renderCorrectLigature","textTachkil","text","_this2","document","addEventListener","_this3","removeEventListener","_this4","_this$state5","Keyboard_KeyboardLayout","onClick","Boolean","window","location","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26b15fd0.chunk.js","sourcesContent":["import React from \"react\";\n\nconst _ligature_ = (\n  beforeCurChar: string,\n  curChar: string,\n  afterCurChar: string\n) => {\n  return (\n    <div>\n      {beforeCurChar + \"\\u200d\"}\n      <span className=\"highlight\">{`\\u200d${curChar}\\u200d`}</span>\n      {\"\\u200d\" + afterCurChar}\n    </div>\n  );\n};\n\nconst ligature_ = (\n  beforeCurChar: string,\n  curChar: string,\n  afterCurChar: string\n) => {\n  return (\n    <div>\n      {beforeCurChar + \"\\u200d\"}\n      <span className=\"highlight\">{`\\u200d${curChar}`}</span>\n      {afterCurChar}\n    </div>\n  );\n};\n\nconst _ligature = (\n  beforeCurChar: string,\n  curChar: string,\n  afterCurChar: string\n) => {\n  return (\n    <div>\n      {beforeCurChar}\n      <span className=\"highlight\">{`${curChar}\\u200d`}</span>\n      {\"\\u200d\" + afterCurChar}\n    </div>\n  );\n};\n\nconst ligature = (\n  beforeCurChar: string,\n  curChar: string,\n  afterCurChar: string\n) => {\n  return (\n    <div>\n      {beforeCurChar}\n      <span className=\"highlight\">{curChar}</span>\n      {afterCurChar}\n    </div>\n  );\n};\n\nconst curCharLam = (\n  beforeCurChar: string,\n  curChar: string,\n  afterCurChar: string\n) => {\n  return (\n    <div>\n      {beforeCurChar}\n      <span className=\"highlight\">{`${curChar}${afterCurChar[0]}`}</span>\n      {afterCurChar.slice(1)}\n    </div>\n  );\n};\n\nconst curCharAlef = (\n  beforeCurChar: string,\n  curChar: string,\n  afterCurChar: string\n) => {\n  return (\n    <div>\n      {beforeCurChar.slice(0, -1)}\n      <span className=\"highlight\">{`${beforeCurChar.slice(\n        -1\n      )}${curChar}`}</span>\n      {afterCurChar}\n    </div>\n  );\n};\n\nexport default (\n  beforeCurChar: string,\n  curChar: string,\n  afterCurChar: string,\n  curCharNum: number,\n  curWithoutTashkil: string,\n  indexOfLigaturedLaOfNegation: number\n) => {\n  /* handle لا */\n\n  const laOfNegation = indexOfLigaturedLaOfNegation > -1;\n  if (laOfNegation) {\n    if (curCharNum === indexOfLigaturedLaOfNegation) {\n      return curCharLam(beforeCurChar, curChar, afterCurChar);\n    }\n    if (curCharNum === indexOfLigaturedLaOfNegation + 1) {\n      return curCharAlef(beforeCurChar, curChar, afterCurChar);\n    }\n  }\n\n  const isNextCharAnEmptyString = curWithoutTashkil[curCharNum + 1] === \" \";\n  const isPrevCharAnEmptyString = curWithoutTashkil[curCharNum - 1] === \" \";\n  const isCurCharAnEmptyString = curWithoutTashkil[curCharNum] === \" \";\n  const isStartOfSentence = curCharNum === 0;\n  const isEndOfSentence = curCharNum === curWithoutTashkil.length - 1;\n\n  const isAlefSucceededByHaa =\n    curChar === \"ٱ\" && curWithoutTashkil[curCharNum + 1] === \"ه\";\n\n  const isHaaPreceededByAlef =\n    curChar === \"ه\" && curWithoutTashkil[curCharNum - 1] === \"ٱ\";\n\n  const isWaaSucceedByLam =\n    curChar === \"و\" && curWithoutTashkil[curCharNum + 1] === \"ل\";\n\n  const isLamPreceededByWaa =\n    curChar === \"ل\" && curWithoutTashkil[curCharNum - 1] === \"و\";\n\n  if (isNextCharAnEmptyString || isEndOfSentence) {\n    return ligature_(beforeCurChar, curChar, afterCurChar);\n  } else if (isPrevCharAnEmptyString || isStartOfSentence) {\n    if (isAlefSucceededByHaa || isWaaSucceedByLam) {\n      return ligature(beforeCurChar, curChar, afterCurChar);\n    }\n    return _ligature(beforeCurChar, curChar, afterCurChar);\n  } else if (isCurCharAnEmptyString) {\n    return ligature(beforeCurChar, curChar, afterCurChar);\n  } else {\n    if (isHaaPreceededByAlef || isLamPreceededByWaa) {\n      return _ligature(beforeCurChar, curChar, afterCurChar);\n    }\n    return _ligature_(beforeCurChar, curChar, afterCurChar);\n  }\n};\n","import React, { Component } from \"react\";\n\ninterface Props {\n  char: string;\n  isToPress: boolean;\n}\n\nexport default class Button extends Component<Props, {}> {\n  renderSpecialButton = (button: string) => {\n    switch (button) {\n      case \"tab\":\n        return <div className=\"button special_button tab\">Tab</div>;\n      case \"delete\":\n        return <div className=\"button special_button tab\">delete</div>;\n      case \"caplock\":\n        return <div className=\"button special_button caplock\">caplock</div>;\n      case \"restart\":\n        return <div className=\"button special_button restart\">restart</div>;\n      case \"shift\":\n        return <div className=\"button special_button shift\">shift</div>;\n      case \"space\":\n        return <div className=\"button special_button space\">space</div>;\n      case \"alt\":\n        return <div className=\"button special_button alt\">alt</div>;\n    }\n    return \"s\";\n  };\n\n  render() {\n    const { char, isToPress } = this.props;\n    const classs = isToPress ? \"button pressed\" : \"button\";\n    // test if its a special button eg. tab or space\n    if (char.match(/{.+}/g)) {\n      const name = char.slice(1, -1);\n      // console.log(name);\n      return this.renderSpecialButton(name);\n    }\n    return <div className={classs}>{char}</div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport { generate } from \"shortid\";\nimport Button from \"./keyboard/Button\";\n\nconst layout: any = {\n  default: [\n    \"ـ 1 2 3 4 5 6 7 8 9 0 - = {delete}\",\n    \"{tab} ض ص ث ق ف غ ع ه خ ح ج ة \\\\\",\n    \"{caplock} ش س ي ب ل ا ت ن م ك ؛ {restart}\",\n    \"{shift} ظ ط ذ د ز ر و ، . / {shift}\",\n    \"{space}\"\n  ],\n  shift: [\n    \" ! @ # $ % ^ & * ( ) _ + {delete}\",\n    \"{tab} َ ً ِ ٍ ُ ٌ ْ ّ ] [ } { |\",\n    '{caplock} « » ى   آ  ٫ ٬ : \" {restart}',\n    \"{shift} '  ئ ء أ إ ؤ > < ؟ {shift}\"\n  ],\n  shiftAlt: [\n    \" ظ ❊ £ € ∞     ° _  {delete}\",\n    \"{tab}    ؉ ڤ  ە    چ  \",\n    \"{caplock}  ے ی پ  ٱ ٹ ں  ک … {restart}\",\n    \"{shift}   ڈ ڑ ژ   ,  ÷ {shift}\",\n    \"{alt} {space} {alt}\"\n  ]\n};\n\ninterface Props {\n  keyToPress: string;\n}\n\nexport default class KeyboardLayout extends Component<Props, {}> {\n  state = {\n    input: \"\"\n  };\n  onInputChanged = (data: any) => {\n    this.setState({ input: data });\n  };\n  onInputSubmitted = (data: any) => {\n    console.log(\"Input submitted:\", data);\n  };\n\n  showCorrectLayout = (keyToPress: string) => {\n    //TODO blog it\n    let condition = true;\n    let wichArrContainsKeyToPress = \"default\";\n    while (condition) {\n      //prettier-ignore\n      const stringOfAllDefaultKeys = layout.default.reduce((acc: string, cur: string) => acc.concat(cur),\"\");\n      if (stringOfAllDefaultKeys.includes(keyToPress)) {\n        console.log(\"1\");\n        condition = false; //to break the while loop\n      }\n      //prettier-ignore\n      const stringOfAllShiftKeys = layout.shift.reduce((acc: string, cur: string) => acc.concat(cur),\"\");\n      if (stringOfAllShiftKeys.includes(keyToPress)) {\n        condition = false; //to break the while loop\n        console.log(\"2\");\n        wichArrContainsKeyToPress = \"shift\";\n      }\n      //prettier-ignore\n      const stringOfAllShiftAltKeys = layout.shiftAlt.reduce((acc: string, cur: string) => acc.concat(cur),\"\");\n      if (stringOfAllShiftAltKeys.includes(keyToPress)) {\n        console.log(\"3\");\n        condition = false; //to break the while loop\n        wichArrContainsKeyToPress = \"shiftAlt\";\n      }\n\n      condition = false;\n    }\n    return wichArrContainsKeyToPress;\n  };\n\n  render() {\n    const { keyToPress } = this.props;\n    const wichArrContainsKeyToPress = this.showCorrectLayout(keyToPress);\n\n    return (\n      <div className=\"keyboard\">\n        {layout[wichArrContainsKeyToPress].map((line: any) => {\n          return (\n            <div className=\"line\" key={generate()}>\n              {line.split(\" \").map((c: any) => (\n                <>\n                  {console.log(keyToPress)}\n                  <Button\n                    key={generate()}\n                    isToPress={c === keyToPress}\n                    char={c}\n                  />\n                </>\n              ))}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","//https://raw.githubusercontent.com/semarketir/quranjson/master/source/surah.json\n\nimport React, { Component } from \"react\";\nimport renderCorrectLigature from \"./renderCorrectLigatures\";\nimport \"./App.css\";\nimport path from \"path\";\nimport Keyboard from \"./Keyboard\";\n\ninterface State {\n  curSourat: number;\n  totalVersesCount: number;\n  name: string;\n  verses: any;\n  curVerseNum: number;\n  curVerse: string;\n  curWithoutTashkil: string;\n  userInput: string;\n  curCharNum: number;\n  indexOfLigaturedLaOfNegation: number;\n}\n\nclass App extends Component<{}, State> {\n  state: State = {\n    curSourat: 2,\n    totalVersesCount: 0,\n    name: \"\",\n    verses: {},\n    curVerseNum: 1,\n    curVerse: \"\",\n    curWithoutTashkil: \"\",\n    userInput: \"\",\n    curCharNum: 0,\n    indexOfLigaturedLaOfNegation: -1\n  };\n\n  handleKeyDown = (e: KeyboardEvent) => {\n    const {\n      curCharNum,\n      curWithoutTashkil,\n      curVerseNum,\n      totalVersesCount\n    } = this.state;\n    const isVerseEnd = curCharNum === curWithoutTashkil.length - 1;\n    const curChar = curWithoutTashkil[curCharNum];\n    const inputCharValue = e.key;\n    const isInputEqualCurChar = curChar === inputCharValue;\n    const isEndOfSourat = curVerseNum === totalVersesCount;\n\n    if (!isVerseEnd && isInputEqualCurChar) {\n      this.setState({ userInput: inputCharValue, curCharNum: curCharNum + 1 });\n    } else if (isVerseEnd && !isEndOfSourat) {\n      this.setState(\n        state => ({ curVerseNum: state.curVerseNum + 1, curCharNum: 0 }),\n        () => this.setCurVerse()\n      );\n    } else if (isEndOfSourat && isVerseEnd) {\n      console.log(\"Congrats you've just finished this sourat\");\n    }\n  };\n\n  componentDidMount() {\n    this.getSourat();\n    document.addEventListener(\"keydown\", e => this.handleKeyDown(e));\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", e => this.handleKeyDown(e));\n  }\n\n  getSourat = async () => {\n    const { curSourat } = this.state;\n    const filePath = path.join(\"/sourates\", `${curSourat}.json`);\n    const res = await fetch(filePath);\n    const data = await res.json();\n    const { count, name, verse } = data;\n    this.setState({ totalVersesCount: count, name, verses: verse }, () =>\n      this.setCurVerse()\n    );\n  };\n\n  setCurVerse = () => {\n    const { verses, curVerseNum } = this.state;\n    const curVerse = verses[`verse_${curVerseNum}`];\n    this.setState({ curVerse }, () => this.setCurVerseWithoutTechkil());\n  };\n\n  setCurVerseWithoutTechkil = () => {\n    const { curVerse } = this.state;\n    let stringWithoutTashkil = curVerse.replace(/ِ|ُ|ٓ|ٰ|ْ|ٌ|ٍ|ً|ّ|َ/g, \"\");\n\n    let indexOfAlef = stringWithoutTashkil.indexOf(\"لا \");\n    if (indexOfAlef > -1) {\n      this.setState({ indexOfLigaturedLaOfNegation: indexOfAlef });\n    }\n\n    this.setState({ curWithoutTashkil: stringWithoutTashkil });\n  };\n\n  updateCurCharNum = () => {\n    const { curCharNum, curWithoutTashkil } = this.state;\n    const end = curCharNum === curWithoutTashkil.length - 1;\n    if (!end) {\n      const { curCharNum } = this.state;\n      this.setState({ curCharNum: curCharNum + 1 });\n    } else {\n      this.setState(\n        state => ({ curVerseNum: state.curVerseNum + 1, curCharNum: 0 }),\n        () => this.setCurVerse()\n      );\n    }\n  };\n\n  getTextWithHighlitedChar = () => {\n    const {\n      curCharNum,\n      curWithoutTashkil,\n      indexOfLigaturedLaOfNegation\n    } = this.state;\n    const curChar = curWithoutTashkil[curCharNum];\n    const beforeCurChar = curWithoutTashkil.slice(0, curCharNum);\n    const afterCurChar = curWithoutTashkil.slice(curCharNum + 1);\n    return renderCorrectLigature(\n      beforeCurChar,\n      curChar,\n      afterCurChar,\n      curCharNum,\n      curWithoutTashkil,\n      indexOfLigaturedLaOfNegation\n    );\n  };\n\n  textTachkil = () => {\n    const { curVerse } = this.state;\n    return <div className=\"duplicate\">{curVerse}</div>;\n  };\n\n  text = () => {\n    return <div className=\"duplicate\">{this.getTextWithHighlitedChar()}</div>;\n  };\n\n  render() {\n    const { curWithoutTashkil, curCharNum } = this.state;\n    if (!curWithoutTashkil) return null;\n    let curChar = curWithoutTashkil[curCharNum];\n    curChar = curChar === \" \" ? \"space\" : curChar;\n    return (\n      <>\n        <div className=\"App\">\n          {this.text()}\n          {this.textTachkil()}\n          <Keyboard keyToPress={curChar} />\n          <div>\n            <button onClick={this.updateCurCharNum}>next char</button>\n            <button\n              onClick={() =>\n                this.setState(state => ({ curCharNum: state.curCharNum - 1 }))\n              }\n            >\n              prev char\n            </button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}